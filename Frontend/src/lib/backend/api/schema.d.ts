/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/orders/{orderId}/address": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** 주문 주소 변경 */
        put: operations["updateOrderAddress"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/members/info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 회원 정보 조회 */
        get: operations["getMemberInfo"];
        /** 회원 정보 수정 */
        put: operations["updateMemberInfo"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/adm/products/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * 상품 수정
         * @description 수정할때도 json형식+file 형태의 값을 입력해야함
         *     시나리오1: 이미지 수정 없음
         *     시나리오2: 새 이미지 업로드
         *
         */
        put: operations["modifywithImage"];
        post?: never;
        /**
         * 상품 삭제
         * @description 일단 상품 삭제
         */
        delete: operations["delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/adm/products/{id}/orderable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * 주문 가능 불가능 설정
         * @description 상품의 주문 가능 여부를 true 또는 false로 변경, 데이터는 orderable만 보냅니다
         */
        put: operations["isOrderable"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/adm/orders/{orderId}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * 주문 상태 변경
         * @description 주문 상태를 변경합니다. 예: ORDERED, SHIPPING, COMPLETED, CANCELED
         */
        put: operations["updateOrderStatus"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/addresses/{addressId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** 주소 수정 */
        put: operations["updateAddress"];
        post?: never;
        /** 주소 삭제 */
        delete: operations["deleteAddress"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/addresses/{addressId}/default": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** 기본 주소 설정 */
        put: operations["setDefaultAddress"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/orders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 주문 생성 */
        post: operations["createOrder"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/members/verify-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 회원 비밀번호 검증 */
        post: operations["verifyPassword"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/members/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 회원 로그인 */
        post: operations["login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/members/join": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 회원 가입 */
        post: operations["join"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/adm/products": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 상품 생성
         * @description json형식 데이터 + file형식으로 상품을 생성합니다
         */
        post: operations["createWithImage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/addresses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 주소 목록 조회 */
        get: operations["getAddressList"];
        put?: never;
        /** 주소 등록 */
        post: operations["submitAddress"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/products": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 상품 목록 조회
         * @description 페이징 처리
         */
        get: operations["getItems"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/products/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 상품 단건 조회
         * @description 상품 ID기반 상품의 상세 정보 조회
         */
        get: operations["getItem"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/members/orders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 회원의 주문 내역 전체 조회 */
        get: operations["getMemberOrders"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/members/orders/{orderId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 회원의 특정 주문 내역 상세 조회 */
        get: operations["getMemberOrderDetail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/adm/orders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 주문 목록 조회 */
        get: operations["getOrders"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/adm/orders/{orderId}/detail": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 주문 상세 조회 */
        get: operations["getOrderDetail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/orders/{orderId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** 주문 취소 */
        delete: operations["cancelOrder"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/members/withdraw": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** 회원 탈퇴 */
        delete: operations["withdraw"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/members/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** 회원 로그아웃 */
        delete: operations["logout"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        OrderUpdateAddressReqBody: {
            newAddress: string;
        };
        RsDataString: {
            /** Format: int32 */
            code?: number;
            message?: string;
            data?: string;
        };
        MemberUpdateDto: {
            email: string;
            name: string;
            password: string;
        };
        MemberWithAuthDto: {
            /** Format: int64 */
            id: number;
            email: string;
            name: string;
            isAdmin: boolean;
        };
        RsDataMemberWithAuthDto: {
            /** Format: int32 */
            code?: number;
            message?: string;
            data?: components["schemas"]["MemberWithAuthDto"];
        };
        ModifyReqBody: {
            productName: string;
            /** Format: int32 */
            price?: number;
            category: string;
            description: string;
            orderable?: boolean;
        };
        ProductDto: {
            /** Format: int64 */
            id?: number;
            /** Format: date-time */
            createdDate?: string;
            /** Format: date-time */
            modifiedDate?: string;
            productName?: string;
            /** Format: int32 */
            price?: number;
            imageUrl?: string;
            category?: string;
            description?: string;
            orderable?: boolean;
        };
        RsDataProductDto: {
            /** Format: int32 */
            code?: number;
            message?: string;
            data?: components["schemas"]["ProductDto"];
        };
        OrderReqBody: {
            orderable?: boolean;
        };
        ProductWithOrderable: {
            orderable?: boolean;
        };
        RsDataProductWithOrderable: {
            /** Format: int32 */
            code?: number;
            message?: string;
            data?: components["schemas"]["ProductWithOrderable"];
        };
        OrderStatusReqBody: {
            status: string;
        };
        OrderStatusResBody: {
            /** Format: int64 */
            id?: number;
            status?: string;
        };
        RsDataOrderStatusResBody: {
            /** Format: int32 */
            code?: number;
            message?: string;
            data?: components["schemas"]["OrderStatusResBody"];
        };
        AddressSubmitReqBody: {
            content: string;
        };
        AddressResBody: {
            /** Format: int64 */
            id?: number;
            content?: string;
            member?: components["schemas"]["MemberDto"];
        };
        MemberDto: {
            /** Format: int64 */
            id: number;
            email: string;
            name: string;
        };
        RsDataAddressResBody: {
            /** Format: int32 */
            code?: number;
            message?: string;
            data?: components["schemas"]["AddressResBody"];
        };
        RsDataVoid: {
            /** Format: int32 */
            code?: number;
            message?: string;
            data?: Record<string, never>;
        };
        OrderCreateReqBody: {
            customerAddress: string;
            orderItems: components["schemas"]["OrderItemCreateReqBody"][];
        };
        OrderItemCreateReqBody: {
            /** Format: int64 */
            productId: number;
            /** Format: int32 */
            count: number;
        };
        /** @description 주문 정보 DTO */
        OrderDto: {
            /**
             * Format: int64
             * @description 주문 ID
             */
            id: number;
            /** @description 주문자 이메일 */
            customerEmail: string;
            /**
             * Format: date-time
             * @description 주문 날짜
             */
            createdDate: string;
            /**
             * @description 처리 상태
             * @example ORDERED
             * @enum {string}
             */
            state: "ORDERED" | "SHIPPING" | "COMPLETED" | "CANCELED" | "ORDERED" | "PAID" | "SHIPPING" | "COMPLETED" | "CANCELED";
            /** @description 주문 주소 */
            customerAddress: string;
            /** @description 주문 상세 목록 */
            orderItems: components["schemas"]["OrderItemDto"][];
        };
        /** @description 상세 주문 정보 DTO */
        OrderItemDto: {
            /**
             * Format: int64
             * @description 주문 아이템 ID
             */
            id: number;
            /**
             * Format: int64
             * @description 주문 ID
             */
            orderId: number;
            /**
             * Format: int64
             * @description 상품 ID
             */
            productId: number;
            /** @description 상품명 */
            productName: string;
            /**
             * Format: int32
             * @description 수량
             */
            count: number;
            /**
             * Format: int32
             * @description 낱개 가격
             */
            price: number;
        };
        RsDataOrderDto: {
            /** Format: int32 */
            code?: number;
            message?: string;
            data?: components["schemas"]["OrderDto"];
        };
        MemberPasswordVerifyReqBody: {
            password: string;
        };
        MemberLoginReqBody: {
            email: string;
            password: string;
        };
        MemberLoginResBody: {
            member?: components["schemas"]["MemberWithAuthDto"];
            apiKey?: string;
            accessToken?: string;
        };
        RsDataMemberLoginResBody: {
            /** Format: int32 */
            code?: number;
            message?: string;
            data?: components["schemas"]["MemberLoginResBody"];
        };
        MemberJoinReqBody: {
            email: string;
            password: string;
            name: string;
        };
        RsDataMemberDto: {
            /** Format: int32 */
            code?: number;
            message?: string;
            data?: components["schemas"]["MemberDto"];
        };
        GCSReqBody: {
            productName: string;
            /** Format: int32 */
            price?: number;
            category: string;
            description: string;
            orderable?: boolean;
        };
        PageDto: {
            items?: components["schemas"]["ProductDto"][];
            /** Format: int32 */
            totalPages?: number;
            /** Format: int32 */
            totalItems?: number;
            /** Format: int32 */
            currentPageNo?: number;
            /** Format: int32 */
            pageSize?: number;
        };
        RsDataPageDto: {
            /** Format: int32 */
            code?: number;
            message?: string;
            data?: components["schemas"]["PageDto"];
        };
        "RsDataUserOrderResponseBody[]": {
            /** Format: int32 */
            code?: number;
            message?: string;
            data?: components["schemas"]["UserOrderResponseBody"][];
        };
        UserOrderItemResponseDto: {
            productName?: string;
            /** Format: int64 */
            productId?: number;
            /** Format: int32 */
            count?: number;
            /** Format: int32 */
            price?: number;
        };
        UserOrderResponseBody: {
            /** Format: int64 */
            orderId?: number;
            orderDate?: string;
            status?: string;
            customerAddress?: string;
            orderItems?: components["schemas"]["UserOrderItemResponseDto"][];
        };
        RsDataUserOrderDetailResponseBody: {
            /** Format: int32 */
            code?: number;
            message?: string;
            data?: components["schemas"]["UserOrderDetailResponseBody"];
        };
        UserOrderDetailResponseBody: {
            /** Format: int64 */
            orderId?: number;
            orderDate?: string;
            status?: string;
            customerAddress?: string;
            orderItems?: components["schemas"]["UserOrderItemDetailResponseDto"][];
        };
        UserOrderItemDetailResponseDto: {
            productName?: string;
            /** Format: int64 */
            productId?: number;
            productImageUrl?: string;
            productCategory?: string;
            /** Format: int32 */
            count?: number;
            /** Format: int32 */
            price?: number;
        };
        /** @description 주문 정보 DTO */
        OrderDtoWithName: {
            /**
             * Format: int64
             * @description 주문 ID
             */
            id: number;
            /** @description 주문자 이메일 */
            customerEmail: string;
            /** @description 주문자 이름 */
            customerName: string;
            /**
             * Format: date-time
             * @description 주문 날짜
             */
            createdDate: string;
            /**
             * @description 처리 상태
             * @example ORDERED
             * @enum {string}
             */
            state: "ORDERED" | "SHIPPING" | "COMPLETED" | "CANCELED" | "ORDERED" | "PAID" | "SHIPPING" | "COMPLETED" | "CANCELED";
            /** @description 주문 주소 */
            customerAddress: string;
            /** @description 주문 상세 목록 */
            orderItems: components["schemas"]["OrderItemDto"][];
        };
        RsDataListOrderDtoWithName: {
            /** Format: int32 */
            code?: number;
            message?: string;
            data?: components["schemas"]["OrderDtoWithName"][];
        };
        /** @description 주문 상세 정보 DTO */
        OrderDtoWithSpecific: {
            /**
             * Format: int64
             * @description 주문 ID
             */
            id?: number;
            /** @description 주문자 이메일 */
            customerEmail?: string;
            /** @description 주문자 이름 */
            customerName: string;
            /** @description 주문 배송 주소 */
            customerAddress?: string;
            /**
             * @description 주문 상태 코드
             * @example ORDERED
             * @enum {string}
             */
            state?: "ORDERED" | "PAID" | "SHIPPING" | "COMPLETED" | "CANCELED";
            /**
             * Format: date-time
             * @description 주문 생성일
             */
            createdDate?: string;
            /** @description 주문에 포함된 상품 목록 */
            orderItems?: components["schemas"]["OrderItemDto"][];
        };
        RsDataOrderDtoWithSpecific: {
            /** Format: int32 */
            code?: number;
            message?: string;
            data?: components["schemas"]["OrderDtoWithSpecific"];
        };
        AddressListResBody: {
            /** Format: int64 */
            id?: number;
            content?: string;
            isDefault?: boolean;
        };
        "RsDataAddressListResBody[]": {
            /** Format: int32 */
            code?: number;
            message?: string;
            data?: components["schemas"]["AddressListResBody"][];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    updateOrderAddress: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                orderId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrderUpdateAddressReqBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataString"];
                };
            };
        };
    };
    getMemberInfo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataMemberWithAuthDto"];
                };
            };
        };
    };
    updateMemberInfo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MemberUpdateDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataMemberWithAuthDto"];
                };
            };
        };
    };
    modifywithImage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    data: components["schemas"]["ModifyReqBody"];
                    /** Format: binary */
                    file?: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataProductDto"];
                };
            };
        };
    };
    delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    isOrderable: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrderReqBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataProductWithOrderable"];
                };
            };
        };
    };
    updateOrderStatus: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                orderId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrderStatusReqBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataOrderStatusResBody"];
                };
            };
        };
    };
    updateAddress: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                addressId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddressSubmitReqBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataAddressResBody"];
                };
            };
        };
    };
    deleteAddress: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                addressId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    setDefaultAddress: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                addressId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    createOrder: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrderCreateReqBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataOrderDto"];
                };
            };
        };
    };
    verifyPassword: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MemberPasswordVerifyReqBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MemberLoginReqBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataMemberLoginResBody"];
                };
            };
        };
    };
    join: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MemberJoinReqBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataMemberDto"];
                };
            };
        };
    };
    createWithImage: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    data: components["schemas"]["GCSReqBody"];
                    /** Format: binary */
                    file?: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataProductDto"];
                };
            };
        };
    };
    getAddressList: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataAddressListResBody[]"];
                };
            };
        };
    };
    submitAddress: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddressSubmitReqBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataAddressResBody"];
                };
            };
        };
    };
    getItems: {
        parameters: {
            query?: {
                page?: number;
                pageSize?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataPageDto"];
                };
            };
        };
    };
    getItem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataProductDto"];
                };
            };
        };
    };
    getMemberOrders: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataUserOrderResponseBody[]"];
                };
            };
        };
    };
    getMemberOrderDetail: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                orderId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataUserOrderDetailResponseBody"];
                };
            };
        };
    };
    getOrders: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataListOrderDtoWithName"];
                };
            };
        };
    };
    getOrderDetail: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                orderId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataOrderDtoWithSpecific"];
                };
            };
        };
    };
    cancelOrder: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                orderId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataOrderDto"];
                };
            };
        };
    };
    withdraw: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    logout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
}
